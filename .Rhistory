setwd("/Users/Mario/Desktop/StatComputing/")
getwd()
haircuts <- c(17, 16.49, 45,
25, 12, 18,
13, 20, 10,
0, 15, 50)
x_bar <- mean(haircuts)
haircuts <- c(17, 16.49, 45,
25, 12, 18,
13, 20, 10,
0, 15, 50)
x_bar <- mean(haircuts)
s_x_bar <- sd(haircuts)/sqrt(length(haircuts))
sd(haircuts)
x_bar
?mapply
boot_strapped_haircuts <- matrix(data = sample(x = haircuts, size = 12*500, replace = TRUE),
nrow = 12)
View(boot_strapped_haircuts)
str(boot_strapped_haircuts)
boot_strapped_haircuts[1]
boot_strapped_haircuts[2]
boot_strapped_haircuts[2, 3]
apply(X = boot_strapped_haircuts, MARGIN = 2, FUN = statistic_generator, theta_hat = x_bar)
haircuts <- c(17, 16.49, 45,
25, 12, 18,
13, 20, 10,
0, 15, 50)
statistic_generator <- function(x, theta_hat){
mean_x <- mean(x)
se_x <- sd(x)/sqrt(length(x))
return(c(mean_x, se_x, (mean_x - theta_hat)/se_x))
}
x_bar <- mean(haircuts)
s_x_bar <- sd(haircuts)/sqrt(length(haircuts))
boot_strapped_haircuts <- matrix(data = sample(x = haircuts, size = 12*500, replace = TRUE),
nrow = 12)
apply(X = boot_strapped_haircuts, MARGIN = 2, FUN = statistic_generator, theta_hat = x_bar)
statistic_generator <- function(x, theta_hat){
mean_x <- mean(x)
se_x <- sd(x)/sqrt(length(x))
return(mean_x - theta_hat)/se_x)
}
statistic_generator <- function(x, theta_hat){
mean_x <- mean(x)
se_x <- sd(x)/sqrt(length(x))
return((mean_x - theta_hat)/se_x)
}
apply(X = boot_strapped_haircuts, MARGIN = 2, FUN = statistic_generator, theta_hat = x_bar)
boot_strapped_haircuts <- matrix(data = sample(x = haircuts, size = 12*500, replace = TRUE),
nrow = 12)
t_star <- sort(apply(X = boot_strapped_haircuts, MARGIN = 2, FUN = statistic_generator, theta_hat = x_bar))
t_star
plot(t_star)
hist(t_star)
range(t_star)
hist(haircuts)
hist(haircuts, breaks = seq.int(from = 0, to = 50, by = 4))
hist(haircuts, breaks = seq.int(from = 0, to = 52, by = 4))
apply(X = boot_strapped_haircuts, FUN = mean, MARGIN = 2) < -2
sum(apply(X = boot_strapped_haircuts, FUN = mean, MARGIN = 2) < -2)
sum(apply(X = boot_strapped_haircuts, MARGIN = 2, FUN = statistic_generator, theta_hat = x_bar) < -2)
sum(apply(X = boot_strapped_haircuts, MARGIN = 2, FUN = statistic_generator, theta_hat = x_bar) < -3)
sum(apply(X = boot_strapped_haircuts, MARGIN = 2, FUN = statistic_generator, theta_hat = x_bar) < -4)
boot_strapped_haircuts[, (apply(X = boot_strapped_haircuts, MARGIN = 2, FUN = statistic_generator, theta_hat = x_bar) < -4)]
t(boot_strapped_haircuts[, (apply(X = boot_strapped_haircuts, MARGIN = 2, FUN = statistic_generator, theta_hat = x_bar) < -4)])
t(boot_strapped_haircuts[, t_star < -4])
(t_star < -4) == TRUE
boot_strapped_haircuts <- matrix(data = sample(x = haircuts, size = 12*500, replace = TRUE),
nrow = 12)
t_star <- apply(X = boot_strapped_haircuts, MARGIN = 2, FUN = statistic_generator, theta_hat = x_bar)
sorted_t_star <- sort(t_star)
t(boot_strapped_haircuts[, t_star < -4])
?match
apply(t(boot_strapped_haircuts[, t_star < -4]), MARGIN = 1, FUN = statistic_generator, theta_hat = x_bar)
range(t_star)
hist(t_star)
hist(t_star)
boot_strapped_haircuts[, (apply(X = boot_strapped_haircuts, MARGIN = 2, FUN = statistic_generator, theta_hat = x_bar) < -4)]
t(boot_strapped_haircuts[, (apply(X = boot_strapped_haircuts, MARGIN = 2, FUN = statistic_generator, theta_hat = x_bar) < -4)])
t(boot_strapped_haircuts[, t_star < -4])
t(boot_strapped_haircuts[, t_star < -4])
apply(t(boot_strapped_haircuts[, t_star < -4]), MARGIN = 1, FUN = statistic_generator, theta_hat = x_bar)
kable(apply(t(boot_strapped_haircuts[, t_star < -4]), MARGIN = 1, FUN = statistic_generator, theta_hat = x_bar))
library(knitr)
kable(apply(t(boot_strapped_haircuts[, t_star < -4]), MARGIN = 1, FUN = statistic_generator, theta_hat = x_bar))
apply(t(boot_strapped_haircuts[, t_star < -4]), MARGIN = 1, FUN = statistic_generator, theta_hat = x_bar)
boot_strapped_haircuts <- matrix(data = sample(x = haircuts, size = 12*50000, replace = TRUE),
nrow = 12)
t_star <- apply(X = boot_strapped_haircuts, MARGIN = 2, FUN = statistic_generator, theta_hat = x_bar)
sorted_t_star <- sort(t_star)
hist(t_star)
hist(t_star, breaks = seq(-100:50)/5)
hist(t_star, breaks = seq(-120:60)/10)
seq(-120:60)/10
seq(-120:60)
hist(t_star, breaks = seq.int(-120:60)/10)
eq.int(-120, 60)/10
seq.int(-120, 60)/10
hist(t_star, breaks = seq.int(-120, 60)/10)
hist(t_star, breaks = seq.int(-1200, 600)/100)
boot_strapped_haircuts <- matrix(data = sample(x = haircuts, size = 12*100000, replace = TRUE),
nrow = 12)
t_star <- apply(X = boot_strapped_haircuts, MARGIN = 2, FUN = statistic_generator, theta_hat = x_bar)
sorted_t_star <- sort(t_star)
hist(t_star, breaks = seq.int(-1200, 600)/100)
range(t_star)
hist(t_star, breaks = seq.int(-1500, 600)/100)
hist(t_star, breaks = seq.int(-1500, 600, by = 4)/100)
hist(t_star, breaks = seq.int(-1500, 600, by = 5)/100)
hist(t_star, breaks = seq.int(-1500, 600, by = 6)/100)
t(boot_strapped_haircuts[, t_star < -4])
range(t_star)
t(boot_strapped_haircuts[, t_star < -10])
boot_strapped_haircuts[, t_star < -10]
t_star < -10
sum(t_star < -10)
boot_strapped_haircuts[,2]
boot_strapped_haircuts[,c(2, 3)]
boot_strapped_haircuts[, t_star < -10]
12 / (12^12)
boot_strapped_haircuts <- matrix(data = sample(x = haircuts, size = 12*500000, replace = TRUE),
nrow = 12)
t_star <- apply(X = boot_strapped_haircuts, MARGIN = 2, FUN = statistic_generator, theta_hat = x_bar)
sorted_t_star <- sort(t_star)
range(t_star)
hist(t_star, breaks = seq.int(-1800, 600, by = 6)/100)
hist(t_star, breaks = seq.int(-1800, 600, by = 6)/100, xlim = c(-15, -2))
hist(t_star, breaks = seq.int(-1800, 600, by = 6)/100, xlim = c(-15, -2), freq = TRUE)
hist(t_star, breaks = seq.int(-1800, 600, by = 6)/100, xlim = c(-15, -2), freq = FALSE)
hist(t_star, breaks = seq.int(-1800, 600, by = 6)/100, xlim = c(-15, -2), freq = FALSE, ylim = c(0, .2))
hist(t_star, breaks = seq.int(-1800, 600, by = 6)/100, xlim = c(-15, -2), freq = FALSE, ylim = c(0, .1))
hist(t_star, breaks = seq.int(-1800, 600, by = 6)/100, freq = FALSE)
choose(23, 11)
boot_strapped_haircuts <- matrix(data = sample(x = haircuts, size = 12*B, replace = TRUE),
nrow = 12)
t_star <- apply(X = boot_strapped_haircuts, MARGIN = 2, FUN = statistic_generator, theta_hat = x_bar)
B <- 10^6
boot_strapped_haircuts <- matrix(data = sample(x = haircuts, size = 12*B, replace = TRUE),
nrow = 12)
t_star <- apply(X = boot_strapped_haircuts, MARGIN = 2, FUN = statistic_generator, theta_hat = x_bar)
sorted_t_star <- sort(t_star)
statistic_generator <- function(x, theta_hat){
return((mean(x) - theta_hat)/(sd(x)/sqrt(length(x))))
}
left <- sorted_t_star[1]
right <- sorted_t_star[2]
hist(t_star, breaks = seq.int(-left*101, right*101, by = 6)/100, freq = FALSE)
hist(t_star, breaks = seq.int(-left*101, right*101, by = 6)/100, xlim = c(-15, -2), freq = FALSE, ylim = c(0, .1))
-left*101
left <- round(sorted_t_star[1])
right <- round(sorted_t_star[2])
hist(t_star, breaks = seq.int(-left*101, right*101, by = 6)/100, freq = FALSE)
hist(t_star, breaks = seq.int(-left*101, right*101, by = 6)/100, xlim = c(-15, -2), freq = FALSE, ylim = c(0, .1))
-left*101
right*101
sorted_t_star[1]
sorted_t_star[B]
left <- round(sorted_t_star[1]-1)
right <- round(sorted_t_star[B]+1)
hist(t_star, breaks = seq.int(-left*101, right*101, by = 6)/100, freq = FALSE)
hist(t_star, breaks = seq.int(-left*101, right*101, by = 6)/100, xlim = c(-15, -2), freq = FALSE, ylim = c(0, .1))
hist(t_star, breaks = seq.int(left*101, right*101, by = 6)/100, freq = FALSE)
hist(t_star, breaks = seq.int(left*101, right*101, by = 6)/100, xlim = c(-15, -2), freq = FALSE, ylim = c(0, .1))
1 / (12 / (12^12))
(1 - (12 / (12^12)))^B
t(boot_strapped_haircuts[, t_star < -15])
t(boot_strapped_haircuts[, t_star < -12])
t(boot_strapped_haircuts[, t_star < -12])
apply(t(boot_strapped_haircuts[, t_star < -12]), MARGIN = 1, FUN = statistic_generator, theta_hat = x_bar)
mean(apply(t(boot_strapped_haircuts[, t_star < -12]), MARGIN = 1, FUN = statistic_generator, theta_hat = x_bar))
t_star[t_star<-12]
t_star <- apply(X = boot_strapped_haircuts, MARGIN = 2, FUN = statistic_generator, theta_hat = x_bar)
sorted_t_star <- sort(t_star)
boot_strapped_haircuts[, t_star < -12]
apply(t(boot_strapped_haircuts[, t_star < -12]), MARGIN = 1, FUN = statistic_generator, theta_hat = x_bar)
boot_strapped_haircuts[, t_star < -12][,6]
mean(boot_strapped_haircuts[, t_star < -12][,6])
sd(boot_strapped_haircuts[, t_star < -12][,6])
t(boot_strapped_haircuts[, t_star < -12])
apply(t(boot_strapped_haircuts[, t_star < -12]), MARGIN = 1, FUN = statistic_generator, theta_hat = x_bar)
haircuts <- c(17, 16.49, 45,
25, 12, 18,
13, 20, 10,
0, 15, 50)
statistic_generator <- function(x, theta_hat){
mean_x <- mean(x)
se_x <- sd(x)/sqrt(length(x))
return(c(mean_x,
sd(x),
(mean_x - theta_hat)/se_x))
}
x_bar <- mean(haircuts)
s_x_bar <- sd(haircuts)/sqrt(length(haircuts))
B <- 10^5
hist(haircuts, breaks = seq.int(from = 0, to = 52, by = 4))
boot_strapped_haircuts <- matrix(data = sample(x = haircuts, size = 12*B, replace = TRUE),
nrow = 12)
boot_statistics <- matrix(apply(X = boot_strapped_haircuts, MARGIN = 2, FUN = statistic_generator, theta_hat = x_bar), ncol = B)
sorted_t_star <- sort(boot_statistics[3, ])
head(boot_strapped_haircuts)
head(boot_statistics)
str(boot_statistics)
boot_statistics[1:3, 1:10]
sorted_t_star[1:10]
left <- round(sorted_t_star[1]-1)
right <- round(sorted_t_star[B]+1)
hist(t_star, breaks = seq.int(left*101, right*101, by = 6)/100, freq = FALSE)
hist(t_star, breaks = seq.int(left*101, right*101, by = 6)/100, xlim = c(-15, -2), freq = FALSE, ylim = c(0, .1))
left <- round(sorted_t_star[1]-1)
right <- round(sorted_t_star[B]+1)
left <- round(sorted_t_star[1]-1)
right <- round(sorted_t_star[B]+1)
hist(t_star, breaks = seq.int(left*101, right*101, by = 5)/100, freq = FALSE)
hist(t_star, breaks = seq.int(left*101, right*101, by = 5)/100, xlim = c(-15, -2), freq = FALSE, ylim = c(0, .1))
left <- round(sorted_t_star[1]-1)
right <- round(sorted_t_star[B]+1)
hist(sorted_t_star, breaks = seq.int(left*101, right*101, by = 5)/100, freq = FALSE)
hist(sorted_t_star, breaks = seq.int(left*101, right*101, by = 5)/100, xlim = c(-15, -2), freq = FALSE, ylim = c(0, .1))
sorted_t_star <- sort(boot_statistics[3, ])
sample_means <- boot_statistics[1, ]
sample_stan_errors <- boot_statistics[2, ]
t(boot_strapped_haircuts[, t_star < -12])
apply(t(boot_strapped_haircuts[, t_star < -12]), MARGIN = 1, FUN = statistic_generator, theta_hat = x_bar)
t(boot_strapped_haircuts[, sorted_t_star < -12])
apply(t(boot_strapped_haircuts[, sorted_t_star < -12]), MARGIN = 1, FUN = statistic_generator, theta_hat = x_bar)
t_star <- boot_statistics[3, ]
sorted_t_star <- sort(t_star)
sample_means <- boot_statistics[1, ]
sample_stan_errors <- boot_statistics[2, ]
left <- round(sorted_t_star[1]-1)
right <- round(sorted_t_star[B]+1)
hist(sorted_t_star, breaks = seq.int(left*101, right*101, by = 5)/100, freq = FALSE)
hist(sorted_t_star, breaks = seq.int(left*101, right*101, by = 5)/100, xlim = c(-15, -2), freq = FALSE, ylim = c(0, .1))
t(boot_strapped_haircuts[, sorted_t_star < -12])
apply(t(boot_strapped_haircuts[, sorted_t_star < -12]), MARGIN = 1, FUN = statistic_generator, theta_hat = x_bar)
plot(sample_means ~ sample_stan_errors)
?rpoispp
install.packages("spatstat")
library(spatstat)
?density
?rpoispp
rpoispp(10)
smoothScatter(sample_means, sample_stan_errors)
install.packages("plotrix")
library(plotrix)
detach("package:spatstat", unload=TRUE)
color.scale(c(1,2,3))
plot(sample_means ~ sample_stan_errors, col(color.scale(t_star)))
plot(sample_means ~ sample_stan_errors, col = color.scale(t_star))
library(ggplot2)
ggplot(aes(sample_means, sample_stan_errors))+geom_point(aes(color = t_star))
ggplot(aes(sample_means, sample_stan_errors))
?ggplot
ggplot()+
geom_point(aes(x = sample_means, y = sample_stan_errors, colour = t_star))
ggplot()+
geom_point(aes(x = sample_means, y = sample_stan_errors, colour = t_star))+
scale_colour_gradient2(mid = "purple")
ggplot()+
geom_point(aes(x = sample_means, y = sample_stan_errors, colour = t_star))+
scale_colour_gradient2(low = "green", mid = "blue", high = "red")
ggplot()+
geom_point(aes(x = sample_means, y = sample_stan_errors, colour = t_star))+
scale_colour_gradient2(low = "red", mid = "blue", high = "blue")
ggplot()+
geom_point(aes(x = sample_means, y = sample_stan_errors, colour = t_star, alpha = 1/10))+
scale_colour_gradient2(low = "red", mid = "blue", high = "blue")
sequence <- seq.int(from = 1, to = B, by = 5)
ggplot()+
geom_point(aes(x = sample_means[sequence], y = sample_stan_errors[sequence],
colour = t_star[sequence], alpha = 1/10))+
scale_colour_gradient2(low = "red", mid = "blue", high = "blue")+
ggtitle("Bootstrapped Sample Means by Sample Standard Error")+
labs(x="Sample Means", y="Sample Standard Deviation")
ggplot()+
geom_point(aes(x = sample_means[sequence], y = sample_stan_errors[sequence],
colour = t_star[sequence], alpha = 1/10))+
scale_colour_gradient2(low = "red", mid = "blue", high = "blue")+
ggtitle("Bootstrapped Sample Means by Sample \"Standard Error\"")+
labs(x="Sample Mean", y="Sample \"Standard Error\"", size = 10)
ggplot()+
geom_point(aes(x = sample_means[sequence], y = sample_stan_errors[sequence],
colour = t_star[sequence], alpha = 1/10))+
scale_colour_gradient2(low = "red", mid = "blue", high = "blue")+
ggtitle("Bootstrapped Sample Means by Sample \"Standard Error\"")+
labs(x="Sample Mean", y="Sample \"Standard Error\"", size = 20, colour = expression(T^*))
ggplot()+
geom_point(aes(x = sample_means[sequence], y = sample_stan_errors[sequence],
colour = t_star[sequence], alpha = 1/10))+
scale_colour_gradient2(low = "red", mid = "blue", high = "blue")+
ggtitle("Bootstrapped Sample Means by Sample \"Standard Error\"")+
labs(x="Sample Mean", y="Sample \"Standard Error\"", size = 20, colour = expression("T^*"))
ggplot()+
geom_point(aes(x = sample_means[sequence], y = sample_stan_errors[sequence],
colour = t_star[sequence], alpha = 1/10))+
scale_colour_gradient2(low = "red", mid = "blue", high = "blue")+
ggtitle("Bootstrapped Sample Means by Sample \"Standard Error\"")+
labs(x="Sample Mean", y="Sample \"Standard Error\"", size = 20, colour = expression("T*"))
ggplot()+
geom_point(aes(x = sample_means[sequence], y = sample_stan_errors[sequence],
colour = t_star[sequence]))+
scale_colour_gradient2(low = "red", mid = "blue", high = "blue")+
ggtitle("Bootstrapped Sample Means by Sample \"Standard Error\"")+
labs(x="Sample Mean", y="Sample \"Standard Error\"", size = 20, colour = expression("T*"))
ggplot()+
geom_point(aes(x = sample_means[sequence], y = sample_stan_errors[sequence],
colour = t_star[sequence]))+
scale_colour_gradient2(low = "red", mid = "blue", high = "blue")+
ggtitle("Bootstrapped Sample Means by Sample \"Standard Error\"")+
labs(x="Sample Mean", y="Sample \"Standard Error\"", size = 20, colour = expression("T*"))+
theme_grey(base_size = 18)
plot(sample_means ~ sample_stan_errors, col = color.scale(t_star))
plot(sample_means ~ sample_stan_errors, col = color.scale(t_star, cs1 = "red", cs2 = "blue"))
color.scale(1:10,c(0,300),35,85,
color.spec="hcl")
plot(sample_means ~ sample_stan_errors, col = color.scale(t_star, c(0,300),35,85,
color.spec="hcl"))
plot(sample_means[sequence] ~ sample_stan_errors[sequence], col = color.scale(t_star, .2, .3, .8))
plot(sample_means[sequence] ~ sample_stan_errors[sequence], col = color.scale(t_star, 1, .3, .8))
plot(sample_means[sequence] ~ sample_stan_errors[sequence], col = color.scale(t_star, c(1,0.5,0),
c(0,0.5,0), c(0,0,1)))
sequence <- seq.int(from = 1, to = B, by = 5)
ggplot()+
geom_point(aes(x = sample_means[sequence], y = sample_stan_errors[sequence],
colour = t_star[sequence]))+
scale_colour_gradient2(low = "red", mid = "blue", high = "blue")+
ggtitle("Bootstrapped Sample Means by Sample \"Standard Error\"")+
labs(x="Sample Mean", y="Sample \"Standard Error\"", size = 20, colour = expression("T*"))+
theme_grey(base_size = 18)
hist(sorted_t_star, breaks = seq.int(left*101, right*101, by = 5)/100, freq = FALSE)
hist(sorted_t_star, breaks = seq.int(left*101, right*101, by = 5)/100, xlim = c(-15, -2), freq = FALSE, ylim = c(0, .1))
(-10:5)-10
(-10:5)
hist(sorted_t_star, breaks = seq.int(left*101, right*101, by = 5)/100, freq = FALSE, at = (-10:5))
hist(sorted_t_star, breaks = seq.int(left*101, right*101, by = 5)/100, freq = FALSE)
hist(sorted_t_star, breaks = seq.int(left*101, right*101, by = 5)/100, freq = FALSE)
hist(sorted_t_star, breaks = seq.int(left*101, right*101, by = 5)/100, xlim = c(-4, -2), freq = FALSE, ylim = c(0, .1))
hist(sorted_t_star, breaks = seq.int(left*101, right*101, by = 5)/100, xlim = c(-7, -1), freq = FALSE, ylim = c(0, .1))
colors <- rep("blue", B)
colors[t_star < -2 && t_star > -4] <- "red"
plot(sample_stan_errors[sequence] ~ sample_means[sequence], col = colors[sequence)]
colors <- rep("blue", B)
colors[t_star < -2 && t_star > -4] <- "red"
plot(sample_stan_errors[sequence] ~ sample_means[sequence], col = colors[sequence])
sum(t_star < -2 && t_star > -4)
sum(t_star < -2)
sum((t_star < -2) && (t_star > -4))
sum((t_star < -2) * (t_star > -4))
colors <- rep("blue", B)
colors[(t_star < -2) * (t_star > -4)] <- "red"
plot(sample_stan_errors[sequence] ~ sample_means[sequence], col = colors[sequence])
table(colors)
(t_star < -2)
c(TRUE, FALSE, TRUE) * c(TRUE, TRUE, FALSE)
colors[(t_star < -2) * (t_star > -4)]
colors <- rep("blue", B)
colors[(t_star < -2) * (t_star > -4)] <- "red"
plot(sample_stan_errors ~ sample_means, col = colors)
table(colors)
colors <- rep("blue", B)
table(colors)
(t_star < -2) * (t_star > -4)
colors[(t_star < -2) * (t_star > -4)]
colors <- rep("blue", B)
colors[(t_star < -2) * (t_star > -4)] <- rep("red", sum((t_star < -2) * (t_star > -4))
plot(sample_stan_errors ~ sample_means, col = colors)
colors <- rep("blue", B)
colors[(t_star < -2) * (t_star > -4)] <- rep("red", sum((t_star < -2) * (t_star > -4)))
plot(sample_stan_errors ~ sample_means, col = colors)
table(colors)
colors <- rep("blue", B)
colors[(t_star < -2) * (t_star > -4)] <- 10
head(colors)
colors <- rep("blue", B)
colors[c(t_star < -2) * (t_star > -4)] <- 10
table(colors)
colors <- rep("blue", B)
colors[c((t_star < -2) * (t_star > -4))] <- 10
table(colors)
c((t_star < -2) * (t_star > -4))
colors[c((t_star < -2) * (t_star > -4))]
colors <- rep("blue", B)
colors[c((t_star < -2) * (t_star > -4))] <- "red"
colors[c((t_star < -2) * (t_star > -4))]
colors
colors <- rep("blue", B)
for(i in 1:B){
if((t_star[i] < -2) * (t_star[i] > -4)){
colors[i] <- "red"
}
}
plot(sample_stan_errors ~ sample_means, col = colors)
hist(sorted_t_star, breaks = seq.int(left*101, right*101, by = 5)/100, freq = FALSE, col = colors)
left <- round(sorted_t_star[1]-1)
right <- round(sorted_t_star[B]+1)
hist(t_star, breaks = seq.int(left*101, right*101, by = 5)/100, freq = FALSE, col = colors)
hist(t_star, breaks = seq.int(left*101, right*101, by = 5)/100, xlim = c(-7, -1), freq = FALSE, ylim = c(0, .1))
hist(t_star, breaks = seq.int(left*101, right*101, by = 5)/100, freq = FALSE, col = colors)
hist(t_star, breaks = seq.int(left*101, right*101, by = 5)/100, freq = FALSE, col = colors)
plot(sample_stan_errors ~ sample_means, col = colors)
hist(t_star, breaks = seq.int(left*101, right*101, by = 5)/100, xlim = c(-7, -0), freq = FALSE, ylim = c(0, .1))
plot(sample_stan_errors ~ sample_means, col = colors)
plot(sample_stan_errors[sequence] ~ sample_means[sequence], col = colors[sequence])
sequence <- seq.int(from = 1, to = B, by = 10)
plot(sample_stan_errors[sequence] ~ sample_means[sequence], col = colors[sequence])
hist(t_star, breaks = seq.int(left*101, right*101, by = 5)/100, freq = FALSE)
sequence <- seq.int(from = 1, to = B, by = 30)
plot(sample_stan_errors[sequence] ~ sample_means[sequence], col = colors[sequence])
